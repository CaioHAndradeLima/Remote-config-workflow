name: sync-remote-config

on:
  schedule:
    - cron: '0 5 * * *'
  workflow_dispatch:

jobs:
  sync-remote-config:
    runs-on: ubuntu-latest

    outputs:
      has_firebase_violation: ${{ steps.check_snake_case.outputs.has_firebase_violation }}
      has_integrity_violation: ${{ steps.compare_configs.outputs.has_integrity_violation }}
      integrity_violation_message: ${{ steps.compare_configs.outputs.integrity_violation_message }}
      firebase_violation_message: ${{ steps.check_snake_case.outputs.firebase_violation_message }}
      invalid_firebase_keys: ${{ steps.check_snake_case.outputs.invalid_firebase_keys }}
      overwriting_local_file: ${{ steps.compare_configs.outputs.overwriting_local_file }}
      error_version_not_updated_remotely: ${{ steps.compare_configs.outputs.error_version_not_updated_remotely }}
      local_version_greater_than_remote: ${{ steps.compare_configs.outputs.local_version_greater_than_remote }}
      local_and_remote_equals: ${{ steps.compare_configs.outputs.local_and_remote_equals }}
      remote_version: ${{ steps.compare_configs.outputs.remote_version }}

    env:
      FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
      FIREBASE_CLIENT_EMAIL: ${{ secrets.FIREBASE_CLIENT_EMAIL }}
      FIREBASE_PRIVATE_KEY: ${{ secrets.FIREBASE_PRIVATE_KEY }}
      #SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    steps:
      - name: 📦 Checkout repository
        uses: actions/checkout@v4

      # Step 1: Request token from Firebase
      - name: 🔐 Requesting Firebase token
        id: get_token
        run: |
          echo "📥 Requesting Firebase token..."

          PRIVATE_KEY_CLEAN=$(echo "${FIREBASE_PRIVATE_KEY}" | sed 's/\\n/\n/g')

          RESPONSE=$(.github/action/generate-firebase-token.sh "${FIREBASE_CLIENT_EMAIL}" "$PRIVATE_KEY_CLEAN")

          ACCESS_TOKEN=$(echo "$RESPONSE" | jq -r '.access_token // empty')

          if [[ -z "$ACCESS_TOKEN" ]]; then
            echo "❌ Failed to retrieve access_token from Firebase. Stopping workflow."
            echo "::set-output name=error::true"
            echo "::set-output name=message::Failed to retrieve access_token from Firebase."
            exit 1
          fi

          echo "✅ Firebase token acquired."
          echo "token=$ACCESS_TOKEN" >> $GITHUB_OUTPUT

      # Step 2: GET current remote config template
      - name: 📡 Step 2 - Request remote config template
        id: get_remote_config
        run: |
          echo "📥 Requesting Remote Config template..."
          chmod +x .github/action/firebase-get-request.sh
          
          PROJECT_ID="${FIREBASE_PROJECT_ID}"
          ACCESS_TOKEN="${{ steps.get_token.outputs.token }}"
          OUT_FILE=".remote_config.json"
          
          .github/action/firebase-get-request.sh "$PROJECT_ID" "$ACCESS_TOKEN" "$OUT_FILE"
          
          echo "✅ Remote config saved to $OUT_FILE"

      # Step 3: Validate keys using snake_case checker
      - name: 🐍 Step 3 - Check firebase.allowed_event_keys
        id: check_snake_case
        run: |
          echo "🔍 Extracting allowed_event_keys from firebase..."
          
          chmod +x .github/action/check-snake-case.sh
          source .github/action/check-snake-case.sh
          
          raw_json=$(jq -r '.parameters.firebase.defaultValue.value' .remote_config.json)
          
          if [[ -z "$raw_json" || "$raw_json" == "null" ]]; then
            echo "❌ No value found in firebase.defaultValue.value"
            echo "has_firebase_violation=false" >> $GITHUB_OUTPUT
            echo "firebase_violation_message=No value found in firebase.defaultValue.value" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          parsed=$(echo "$raw_json" | jq -R 'fromjson?')
          
          if [[ -z "$parsed" || "$parsed" == "null" ]]; then
            echo "❌ Failed to parse firebase.defaultValue.value as JSON"
            echo "has_firebase_violation=false" >> $GITHUB_OUTPUT
            echo "firebase_violation_message=Failed to parse firebase.defaultValue.value as JSON" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          allowed_keys=$(echo "$raw_json" | jq -R 'fromjson | .allowed_event_keys')
          
          if [[ "$allowed_keys" == "null" ]]; then
            echo "❌ 'allowed_event_keys' field not found in firebase"
            echo "has_firebase_violation=false" >> $GITHUB_OUTPUT
            echo "firebase_violation_message=field allowed_event_keys not found in firebase" >> $GITHUB_OUTPUT
            exit 1
          fi
                    
          # Collect invalid keys
          invalid_keys=()
          while IFS= read -r key; do
            if ! is_snake_case "$key"; then
              invalid_keys+=("$key")
            fi
          done < <(echo "$allowed_keys" | jq -r '.[]')
          
          conditional_values_exist=$(jq '.parameters.firebase.conditionalValues != null' .remote_config.json)
  
          if [[ "$conditional_values_exist" == "true" ]]; then
  
            # Validate conditionalValues
            conditional_keys=$(jq -r '.parameters.firebase.conditionalValues | keys[]' .remote_config.json)
            
            for condition_key in $conditional_keys; do
              echo "🔍 Extracting allowed_event_keys from conditional '$condition_key'..."
            
              raw_conditional_json=$(jq -r --arg key "$condition_key" '.parameters.firebase.conditionalValues[$key].value' .remote_config.json)
            
              parsed_conditional=$(echo "$raw_conditional_json" | jq -R 'fromjson?')
            
              if [[ -z "$parsed_conditional" || "$parsed_conditional" == "null" ]]; then
                echo "⚠️ Failed to parse conditional '$condition_key' as JSON"
                continue
              fi
            
              allowed_keys_conditional=$(echo "$raw_conditional_json" | jq -R 'fromjson | .allowed_event_keys')
            
              if [[ "$allowed_keys_conditional" == "null" ]]; then
                echo "⚠️ 'allowed_event_keys' not found in conditional '$condition_key'"
                continue
              fi
                      
              while IFS= read -r key; do
                if ! is_snake_case "$key"; then
                  invalid_keys+=("${key} (conditional: $condition_key)")
                fi
              done < <(echo "$allowed_keys_conditional" | jq -r '.[]')
            done
          fi
          
          if [ ${#invalid_keys[@]} -eq 0 ]; then
            echo "✅ All items in 'allowed_event_keys' (default + conditionals) are in snake_case."
            echo "has_firebase_violation=false" >> $GITHUB_OUTPUT
          else
            echo "❌ Found item(s) not in snake_case:"
            printf '%s\n' "${invalid_keys[@]}" | tee firebase_violations.txt
            echo "has_firebase_violation=true" >> $GITHUB_OUTPUT
            echo "firebase_violation_message=Invalid keys found in allowed_event_keys (default or conditional)" >> $GITHUB_OUTPUT
            echo "invalid_firebase_keys=$(IFS=, ; echo "${invalid_keys[*]}")" >> $GITHUB_OUTPUT
          fi

      - name: ⚙️ Compare local and remote versions
        id: compare_configs
        if: ${{ steps.check_snake_case.outputs.has_firebase_violation == 'false' }}
        run: |
          LOCAL_FILE="config/firebase.json"
          REMOTE_FILE=".remote_config.json"

          LOCAL_VERSION=$(jq -r '.version' "$LOCAL_FILE")
          REMOTE_VERSION=$(jq -r '.parameters.firebase.defaultValue.value | fromjson | .version' "$REMOTE_FILE")
          echo "remote_version=$REMOTE_VERSION" >> $GITHUB_OUTPUT

          if (( REMOTE_VERSION > LOCAL_VERSION )); then
            echo "🚀 Remote version is newer. Overwriting local config."
            echo "overwriting_local_file=true" >> $GITHUB_OUTPUT
            cp "$REMOTE_FILE" "$LOCAL_FILE"
          elif (( REMOTE_VERSION == LOCAL_VERSION )); then
            echo "local_and_remote_equals=true" >> $GITHUB_OUTPUT
            LOCAL_CONTENT=$(jq -c 'del(.version)' "$LOCAL_FILE")
            REMOTE_CONTENT=$(jq -r '.parameters.firebase.defaultValue.value | fromjson | del(.version)' "$REMOTE_FILE")

            if [[ "$LOCAL_CONTENT" != "$REMOTE_CONTENT" ]]; then
              echo "error_version_not_updated_remotely=true" >> $GITHUB_OUTPUT
              echo "::error::Config version match but contents differ."
              echo "has_integrity_violation=true" >> $GITHUB_OUTPUT
              echo "integrity_violation_message=Version of remote and local are equals but content are different" >> $GITHUB_OUTPUT
            fi
          elif (( REMOTE_VERSION < LOCAL_VERSION )); then
            echo "local_version_greater_than_remote=true" >> $GITHUB_OUTPUT
            echo "⚠️ Local version is newer than remote. we made a rollback recently?"
            echo "has_integrity_violation=true" >> $GITHUB_OUTPUT
            echo "integrity_violation_message=Local version is newer than remote. we made a rollback recently?" >> $GITHUB_OUTPUT
          fi

  report-violations:
    needs: sync-remote-config
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: 📆 Print check results
        run: |
          echo "📊 Summary from sync-remote-config job:"

          if [[ "${{ needs.sync-remote-config.outputs.has_firebase_violation }}" == "true" ]]; then
            echo "❌ Firebase allowed_event_keys has data integrity violation."
            echo "📃 Reason: ${{ needs.sync-remote-config.outputs.firebase_violation_message }}"
            echo "🔑 Invalid keys: ${{ needs.sync-remote-config.outputs.invalid_firebase_keys }}"
            echo "🚨 CI failed due to data integrity violation."
            exit 1
          elif [[ "${{ needs.sync-remote-config.outputs.has_integrity_violation }}" == "true" ]]; then
            echo "❌ Firebase allowed_event_keys has data integrity violation."
            echo "📃 Reason: ${{ needs.sync-remote-config.outputs.integrity_violation_message }}"
            echo "🚨 CI failed due to data integrity violation."
            exit 1
          elif [[ "${{ needs.sync-remote-config.outputs.overwriting_local_file }}" == "true" ]]; then
            echo "✅ We updated the local file to version ${{ needs.sync-remote-config.outputs.remote_version }}."
          elif [[ "${{ needs.sync-remote-config.outputs.local_and_remote_equals }}" == "true" ]]; then
            echo "✅ The local file is already up to date."
          else
            echo "✅ No snake_case violations found."
          fi
