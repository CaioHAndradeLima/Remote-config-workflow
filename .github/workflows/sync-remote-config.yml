name: sync-remote-config

on:
  schedule:
    - cron: '0 5 * * *'
  workflow_dispatch:

jobs:
  sync-remote-config:
    runs-on: ubuntu-latest

    env:
      FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
      FIREBASE_CLIENT_EMAIL: ${{ secrets.FIREBASE_CLIENT_EMAIL }}
      FIREBASE_PRIVATE_KEY: ${{ secrets.FIREBASE_PRIVATE_KEY }}
      #SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    steps:
      - name: 📦 Checkout repository
        uses: actions/checkout@v4

      # Step 1: Request token from Firebase
      # Step 1: Request token from Firebase
      - name: 🔐 Requesting Firebase token
        id: get_token
        run: |
          echo "📥 Requesting Firebase token..."

          PRIVATE_KEY_CLEAN=$(echo "${FIREBASE_PRIVATE_KEY}" | sed 's/\\n/\n/g')

          RESPONSE=$(.github/action/generate-firebase-token.sh "${FIREBASE_CLIENT_EMAIL}" "$PRIVATE_KEY_CLEAN")

          ACCESS_TOKEN=$(echo "$RESPONSE" | jq -r '.access_token // empty')

          if [[ -z "$ACCESS_TOKEN" ]]; then
            echo "❌ Failed to retrieve access_token from Firebase. Stopping workflow."
            echo "::set-output name=error::true"
            echo "::set-output name=message::Failed to retrieve access_token from Firebase."
            exit 1
          fi

          echo "✅ Firebase token acquired."
          echo "token=$ACCESS_TOKEN" >> $GITHUB_OUTPUT

      # Step 2: GET current remote config template
      - name: 📡 Step 2 - Request remote config template
        id: get_remote_config
        run: |
          echo "📥 Requesting Remote Config template..."
          chmod +x .github/action/firebase-get-request.sh
          
          PROJECT_ID="${FIREBASE_PROJECT_ID}"
          ACCESS_TOKEN="${{ steps.get_token.outputs.token }}"
          OUT_FILE=".remote_config.json"
          
          .github/action/firebase-get-request.sh "$PROJECT_ID" "$ACCESS_TOKEN" "$OUT_FILE"
          
          echo "✅ Remote config saved to $OUT_FILE"

      # Step 3: Validate keys using snake_case checker
      - name: 🐍 Step 3 - Check firebase.allowed_event_keys
        id: check_snake_case
        run: |
          echo "🔍 Extracting allowed_event_keys from firebase..."
          
          chmod +x .github/action/check-snake-case.sh
          source .github/action/check-snake-case.sh
          
          raw_json=$(jq -r '.parameters.firebase.defaultValue.value' .remote_config.json)
          
          if [[ -z "$raw_json" || "$raw_json" == "null" ]]; then
            echo "❌ No value found in firebase.defaultValue.value"
            echo "has_firebase_violation=false" >> $GITHUB_OUTPUT
            echo "firebase_violation_message=No value found in firebase.defaultValue.value" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          parsed=$(echo "$raw_json" | jq -R 'fromjson?')
          
          if [[ -z "$parsed" || "$parsed" == "null" ]]; then
            echo "❌ Failed to parse firebase.defaultValue.value as JSON"
            echo "has_firebase_violation=false" >> $GITHUB_OUTPUT
            echo "firebase_violation_message=Failed to parse firebase.defaultValue.value as JSON" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          allowed_keys=$(echo "$raw_json" | jq -R 'fromjson | .allowed_event_keys')
          
          if [[ "$allowed_keys" == "null" ]]; then
            echo "❌ 'allowed_event_keys' field not found in firebase"
            echo "has_firebase_violation=false" >> $GITHUB_OUTPUT
            echo "firebase_violation_message=field allowed_event_keys not found in firebase" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "📋 List to check: $allowed_keys"
          
          # Collect invalid keys
          invalid_keys=()
          while IFS= read -r key; do
            if ! is_snake_case "$key"; then
              invalid_keys+=("$key")
            fi
          done < <(echo "$allowed_keys" | jq -r '.[]')
          
          if [ ${#invalid_keys[@]} -eq 0 ]; then
            echo "✅ All items in 'allowed_event_keys' are in snake_case."
            echo "has_firebase_violation=false" >> $GITHUB_OUTPUT
          else
            echo "❌ Found item(s) not in snake_case:"
            printf '%s\n' "${invalid_keys[@]}" | tee firebase_violations.txt
            echo "has_firebase_violation=true" >> $GITHUB_OUTPUT
            echo "firebase_violation_message=Invalid keys found in allowed_event_keys" >> $GITHUB_OUTPUT
            echo "invalid_firebase_keys=$(IFS=, ; echo "${invalid_keys[*]}")" >> $GITHUB_OUTPUT
            cat $GITHUB_OUTPUT
          fi

      # Step 4: Notify Slack if any problem occurs or if snake_case mismatch found
      - name: 📢 Step 4 - Notify Slack
        if: ${{ always() }}
        run: |
          # TODO: If we had issues in any step or found snake_case violations,
          # format a message and send it to Slack using webhook
