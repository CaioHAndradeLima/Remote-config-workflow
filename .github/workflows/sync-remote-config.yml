name: sync-remote-config

on:
  schedule:
    - cron: '0 5 * * *'
  workflow_dispatch:

jobs:
  sync-remote-config:
    runs-on: ubuntu-latest

    env:
      FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
      FIREBASE_CLIENT_EMAIL: ${{ secrets.FIREBASE_CLIENT_EMAIL }}
      FIREBASE_PRIVATE_KEY: ${{ secrets.FIREBASE_PRIVATE_KEY }}
      #SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    steps:
      - name: üì¶ Checkout repository
        uses: actions/checkout@v4

      # Step 1: Request token from Firebase
      # Step 1: Request token from Firebase
      - name: üîê Requesting Firebase token
        id: get_token
        run: |
          echo "üì• Requesting Firebase token..."

          PRIVATE_KEY_CLEAN=$(echo "${FIREBASE_PRIVATE_KEY}" | sed 's/\\n/\n/g')

          RESPONSE=$(.github/action/generate-firebase-token.sh "${FIREBASE_CLIENT_EMAIL}" "$PRIVATE_KEY_CLEAN")

          ACCESS_TOKEN=$(echo "$RESPONSE" | jq -r '.access_token // empty')

          if [[ -z "$ACCESS_TOKEN" ]]; then
            echo "‚ùå Failed to retrieve access_token from Firebase. Stopping workflow."
            echo "::set-output name=error::true"
            echo "::set-output name=message::Failed to retrieve access_token from Firebase."
            exit 1
          fi

          echo "‚úÖ Firebase token acquired."
          echo "token=$ACCESS_TOKEN" >> $GITHUB_OUTPUT

      # Step 2: GET current remote config template
      - name: üì° Step 2 - Request remote config template
        id: get_remote_config
        run: |
          echo "üì• Requesting Remote Config template..."
          chmod +x .github/action/firebase-get-request.sh
          
          PROJECT_ID="${FIREBASE_PROJECT_ID}"
          ACCESS_TOKEN="${{ steps.get_token.outputs.token }}"
          OUT_FILE=".remote_config.json"
          
          .github/action/firebase-get-request.sh "$PROJECT_ID" "$ACCESS_TOKEN" "$OUT_FILE"
          
          cat $OUT_FILE
          echo "‚úÖ Remote config saved to $OUT_FILE"

      # Step 3: Validate keys using snake_case checker
      - name: üêç Step 3 - Run snake_case check
        id: check_snake_case
        run: |
          # TODO: Parse JSON and call the script to validate snake_case in string lists

      # Step 4: Notify Slack if any problem occurs or if snake_case mismatch found
      - name: üì¢ Step 4 - Notify Slack
        if: ${{ always() }}
        run: |
          # TODO: If we had issues in any step or found snake_case violations,
          # format a message and send it to Slack using webhook
