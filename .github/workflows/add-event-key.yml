name: Add a new event key

on:
  workflow_dispatch:
    inputs:
      new_event_name:
        description: "Event key name in snake case"
        required: true
        type: string

      target_tool:
        description: "Marketing tool"
        required: true
        default: "firebase"
        type: choice
        options:
          - firebase

jobs:
  add_event:
    runs-on: ubuntu-latest

    env:
      FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
      FIREBASE_CLIENT_EMAIL: ${{ secrets.FIREBASE_CLIENT_EMAIL }}
      FIREBASE_PRIVATE_KEY: ${{ secrets.FIREBASE_PRIVATE_KEY }}

    steps:
      - name: üì¶ Checkout repository
        uses: actions/checkout@v4

      # ‚úÖ Step 1: Validate if the event is snake_case
      - name: üêç Step 1 - Validate snake_case
        run: |
          chmod +x .github/action/check-snake-case.sh
          source .github/action/check-snake-case.sh

          event_name="${{ github.event.inputs.new_event_name }}"

          echo "üîç Validating event name: $event_name"

          if is_snake_case "$event_name"; then
            echo "‚úÖ Event name is valid (snake_case)"
          else
            echo "‚ùå Event name is not valid (must be snake_case: lowercase with underscores)"
            exit 1
          fi

      # üîê Step 2: Generate Firebase Token
      - name: üîê Step 2 - Generate Firebase Token
        run: |
          echo "üì• Requesting Firebase token..."

          PRIVATE_KEY_CLEAN=$(echo "${FIREBASE_PRIVATE_KEY}" | sed 's/\\n/\n/g')

          RESPONSE=$(.github/action/generate-firebase-token.sh "${FIREBASE_CLIENT_EMAIL}" "$PRIVATE_KEY_CLEAN")

          ACCESS_TOKEN=$(echo "$RESPONSE" | jq -r '.access_token // empty')

          if [[ -z "$ACCESS_TOKEN" ]]; then
            echo "‚ùå Failed to retrieve access_token from Firebase. Stopping workflow."
            echo "::set-output name=error::true"
            echo "::set-output name=message::Failed to retrieve access_token from Firebase."
            exit 1
          fi

          echo "‚úÖ Firebase token acquired."
          echo "token=$ACCESS_TOKEN" >> $GITHUB_OUTPUT
      # üì• Step 3: Download Remote Config Template
      - name: üì• Step 3 - Get Remote Config Template
        run: |
          echo "üì• Requesting Remote Config template..."
          chmod +x .github/action/firebase-get-request.sh
          
          PROJECT_ID="${FIREBASE_PROJECT_ID}"
          ACCESS_TOKEN="${{ steps.get_token.outputs.token }}"
          OUT_FILE=".remote_config.json"
          
          .github/action/firebase-get-request.sh "$PROJECT_ID" "$ACCESS_TOKEN" "$OUT_FILE"
          
          echo "‚úÖ Remote config saved to $OUT_FILE"

      # ‚ûï Step 4: Add event to allowed_event_keys
      - name: ‚ûï Step 4 - Add event to list
        run: |
          CONFIG_FILE=".remote_config.json"
          PARAM_KEY="allowed_event_keys"
          NEW_EVENT="${{ github.event.inputs.new_event_name }}"
          UPDATED_FILE="updated_remote_config.json"

          chmod +x .github/action/add-event-key.sh

          echo "üîç Checking and updating $PARAM_KEY with event: $NEW_EVENT"

          .github/action/add-event-key.sh "$CONFIG_FILE" "$PARAM_KEY" "$NEW_EVENT"

          # Rename the output for consistency
          mv "updated_${CONFIG_FILE}" "$UPDATED_FILE"

          echo "‚úÖ Event processed. Output written to $UPDATED_FILE"

      # üõ°Ô∏è Step 5 - Check JSON integrity before pushing update
      - name: üõ°Ô∏è Step 5 - Check JSON integrity before pushing update
        run: |
          ORIGINAL_FILE=".remote_config.json"
          UPDATED_FILE="updated_remote_config.json"
          PARAM_KEY="allowed_event_keys"

          chmod +x .github/action/check-json-integrity.sh

          echo "üîç Validating JSON integrity..."
          .github/action/check-json-integrity.sh "$PARAM_KEY" "$ORIGINAL_FILE" "$UPDATED_FILE"

          echo "‚úÖ JSON integrity confirmed."